package Code9;

public class Code9 {
    public static void main( String[] args ) {
        // 位运算符
        // 注意：位运算符是针对二进制进行的运算

        // 常见的位运算符：
        // & 按位与
        // | 按位或
        // ^ 按位异或
        // ~ 按位取反
        // << 左移
        // >> 右移
        // >>> 无符号右移


        // 原码、反码、补码
        // 原码：符号位为1，其余不变
        // 反码：符号位不变，其余位取反
        // 补码：反码+1
        // 如：9的原码、反码和补码：
        // 原码：1000 1001(十进制-9)
        // 反码：1111 0110(十进制-118)
        // 补码：1111 0111(十进制-119)


        // 位运算符的使用，例：

        // &运算符需要两个操作数对应位的数是1才返回1，否则返回0
        System.out.println("7 & 9 的结果是" + (7 & 9));
        // 7的二进制：0000 0111
        // 9的二进制：0000 1001
        // 二进制数为0000 0001，即十进制数1
        // 输出结果：1

        // |运算符需要两个操作数对应位的数是0才返回0，否则返回1
        System.out.println("7 | 9 的结果是" + (7 | 9));
        // 7的二进制：0000 0111
        // 9的二进制：0000 1001
        // 二进制数为0000 1111，即十进制数15
        // 输出结果：15

        // ^运算符需要两个操作数对应位的数是相同才返回0，否则返回1
        System.out.println("7 ^ 9 的结果是" + (7 ^ 9));
        // 7的二进制：0000 0111
        // 9的二进制：0000 1001
        // 二进制数为0000 1110，即十进制数14
        // 输出结果：14

        // ~运算符即取反运算符，与!运算符类似
        System.out.println("~9 的结果是" + (~9));
        // 9的二进制：0000 1001
        // 二进制数为1111 0110，即十进制数-10
        // 输出结果：-10

        // <<运算符将数字的高位抛弃，低位补0，并左移指定的位数
        // 格式：数字 << 移动的位数
        System.out.println("9 << 2 的结果是" + (9 << 2));
        // 9的二进制：0000 1001
        // 二进制数为0010 0100，即十进制数36
        // 输出结果：36

        // >>运算符将数字的低位抛弃，高位补0，并右移指定的位数
        // 格式：数字 >> 移动的位数
        System.out.println("9 >> 2 的结果是" + (9 >> 2));
        // 9的二进制：0000 1001
        // 二进制数为0000 0010，即十进制数2
        // 输出结果：2

        // >>>运算符将数字的低位抛弃，高位补0，并右移指定的位数(忽略符号位)
        // 格式：数字 >>> 移动的位数
        System.out.println("-9 >>> 2 的结果是" + (-9 >>> 2));
        // -9的二进制：1111 1111 1111 1111 1111 1111 1111 0111
        // 二进制数为0011 1111 1111 1111 1111 1111 1111 1101，即十进制数1073741821
        // 输出结果：1073741821
    }
}
